TODO:

Parser:
  x Load files
  x Extract Tokens
  x Verify that parentheses match up
  * Handle String, Uint, and Bool constants. Convert everything else into symbols.
  * Convert tokens into AST
  * Generate a per-contract Symbol Table:
    * Local variables
    * Local structs
    * Local functions
    * Handle Lambda functions
  * Generate Symbol Tables for variables in (let ...)
  * Translate symbols into variables, functions, and types through table lookups. If an undefined symbol is found, error.

Type Checker:
  * Define core type structs
    * Uint, Str, Bool, Address, and Hash, plus Mapping, Array, Function, and Struct extensions for these.
  * Check that inputs and outputs match up in functions.
  * Associate each function/variable in each symbol tables with a type
  ^ The above two can probably be merged into a single task, more or less

Verification:
  * Look for assertions
  * Convert code into SMT problems
  * Feed this to Z3 and check satisfiability
  * Report errors if anything doesn't match up

Backend:
  * Convert AST into Solidity
    * Lambda functions should be translated into private functions
      * Ideally we could do more here and do some optimizations, but this is an mvp.
  * Call up the Solidity compiler and compile
